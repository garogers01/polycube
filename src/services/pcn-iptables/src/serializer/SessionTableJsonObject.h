/**
* iptables API
* iptables API generated from iptables.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */

/*
* SessionTableJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace io {
namespace swagger {
namespace server {
namespace model {


/// <summary>
///
/// </summary>
class  SessionTableJsonObject : public JsonObjectBase {
public:
  SessionTableJsonObject();
  SessionTableJsonObject(const nlohmann::json &json);
  ~SessionTableJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Source IP
  /// </summary>
  std::string getSrc() const;
  void setSrc(std::string value);
  bool srcIsSet() const;

  /// <summary>
  /// Destination IP
  /// </summary>
  std::string getDst() const;
  void setDst(std::string value);
  bool dstIsSet() const;

  /// <summary>
  /// Level 4 Protocol.
  /// </summary>
  std::string getL4proto() const;
  void setL4proto(std::string value);
  bool l4protoIsSet() const;

  /// <summary>
  /// Source Port
  /// </summary>
  uint16_t getSport() const;
  void setSport(uint16_t value);
  bool sportIsSet() const;

  /// <summary>
  /// Destination
  /// </summary>
  uint16_t getDport() const;
  void setDport(uint16_t value);
  bool dportIsSet() const;

  /// <summary>
  /// Entry direction (forward/reverse)
  /// </summary>
  std::string getDirection() const;
  void setDirection(std::string value);
  bool directionIsSet() const;
  void unsetDirection();

  /// <summary>
  /// Session ID
  /// </summary>
  uint32_t getId() const;
  void setId(uint32_t value);
  bool idIsSet() const;
  void unsetId();

  /// <summary>
  /// Connection state
  /// </summary>
  std::string getState() const;
  void setState(std::string value);
  bool stateIsSet() const;
  void unsetState();

  /// <summary>
  /// Expire TTL
  /// </summary>
  uint64_t getTtl() const;
  void setTtl(uint64_t value);
  bool ttlIsSet() const;
  void unsetTtl();

  /// <summary>
  /// Sequence
  /// </summary>
  uint32_t getSequence() const;
  void setSequence(uint32_t value);
  bool sequenceIsSet() const;
  void unsetSequence();

  /// <summary>
  /// Dnat new ip
  /// </summary>
  std::string getDnatip() const;
  void setDnatip(std::string value);
  bool dnatipIsSet() const;
  void unsetDnatip();

  /// <summary>
  /// Dnat new port
  /// </summary>
  uint16_t getDnatport() const;
  void setDnatport(uint16_t value);
  bool dnatportIsSet() const;
  void unsetDnatport();

  /// <summary>
  /// Snat new ip
  /// </summary>
  std::string getSnatip() const;
  void setSnatip(std::string value);
  bool snatipIsSet() const;
  void unsetSnatip();

  /// <summary>
  /// Snat new port
  /// </summary>
  uint16_t getSnatport() const;
  void setSnatport(uint16_t value);
  bool snatportIsSet() const;
  void unsetSnatport();

private:
  std::string m_src;
  bool m_srcIsSet;
  std::string m_dst;
  bool m_dstIsSet;
  std::string m_l4proto;
  bool m_l4protoIsSet;
  uint16_t m_sport;
  bool m_sportIsSet;
  uint16_t m_dport;
  bool m_dportIsSet;
  std::string m_direction;
  bool m_directionIsSet;
  uint32_t m_id;
  bool m_idIsSet;
  std::string m_state;
  bool m_stateIsSet;
  uint64_t m_ttl;
  bool m_ttlIsSet;
  uint32_t m_sequence;
  bool m_sequenceIsSet;
  std::string m_dnatip;
  bool m_dnatipIsSet;
  uint16_t m_dnatport;
  bool m_dnatportIsSet;
  std::string m_snatip;
  bool m_snatipIsSet;
  uint16_t m_snatport;
  bool m_snatportIsSet;
};

}
}
}
}

